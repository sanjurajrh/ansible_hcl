- name: Set Container Instance Names
  ansible.builtin.set_fact:
    rpfx: "{{ resource_group | hash('md5') | truncate(7, True, '') }}{{ 1000 | random }}"

- name: Gather Resource Group info
  azure.azcollection.azure_rm_resourcegroup_info:
    name: "{{ resource_group }}"
  register: __rg_info

- name: Set location and managed_identity_ids
  ansible.builtin.set_fact:
    location: "{{ __rg_info.resourcegroups.0.location }}"
    managed_identity_ids: []

- name: Create user managed identities
  ansible.builtin.include_tasks: "{{ role_path }}/../../../integration_common_tasks/managed_identity.yml"
  vars:
    managed_identity_test_unique: 'aci'
    managed_identity_unique: "{{ item }}"
    managed_identity_action: 'create'
    managed_identity_location: "{{ location }}"
  with_items:
    - '1'
    - '2'

- name: Create sample container instance
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
  register: output

- name: Print the created results
  ansible.builtin.debug:
    var: output

- name: Assert the container instance is well created
  ansible.builtin.assert:
    that:
      - output.changed
      - output.provisioning_state == 'Succeeded'

- name: Create sample container instance -- same parameters
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
  register: output

- name: Assert the container instance is well created
  ansible.builtin.assert:
    that:
      - output.changed == False

- name: Create sample container instance -- force update
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
    identity:
      type: SystemAssigned
    force_update: true
  register: output

- name: Print the created results
  ansible.builtin.debug:
    var: output

- name: Assert the container instance is well created
  ansible.builtin.assert:
    that:
      - output.changed
      - output.provisioning_state == 'Succeeded'

- name: Create second container instance for testing purposes
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}sec"
    os_type: linux
    ip_address: public
    dns_name_label: mydnslabel{{ resource_group | hash('md5') | truncate(7, True, '') }}
    location: "{{ location }}"
    restart_policy: on_failure
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
        environment_variables:
          - name: myvar
            value: myvarvalue
  register: output

- name: Create virtual network
  azure_rm_virtualnetwork:
    resource_group: "{{ resource_group }}"
    name: "vnet{{ rpfx }}"
    address_prefixes_cidr:
      - 10.1.0.0/16
      - 172.100.0.0/16

- name: Create a subnet
  azure_rm_subnet:
    resource_group: "{{ resource_group }}"
    name: "sub{{ rpfx }}"
    virtual_network_name: "vnet{{ rpfx }}"
    address_prefix_cidr: "10.1.0.0/24"
    private_link_service_network_policies: Disabled
    private_endpoint_network_policies: Disabled
    delegations:
      - name: delegation_to_containerinsance
        serviceName: 'Microsoft.ContainerInstance/containerGroups'
  register: subnet_output

- name: Create third container instance for subnet_ids
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}thi"
    os_type: linux
    ip_address: private
    location: "{{ location }}"
    subnet_ids:
      - "{{ subnet_output.state.id }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
  register: output

- name: Assert the container instance is well created
  ansible.builtin.assert:
    that:
      - output.changed

- name: Gather facts for single Container Instance
  azure_rm_containerinstance_info:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}sec"
  register: output

- name: Print the container instance facts
  ansible.builtin.debug:
    var: output

- name: Assert that facts are returned
  ansible.builtin.assert:
    that:
      - output.changed == False
      - output.containerinstances[0]['resource_group'] != None
      - output.containerinstances[0]['name'] != None
      - output.containerinstances[0]['os_type'] != None
      - output.containerinstances[0]['location'] != None
      - output.containerinstances[0]['ip_address'] != None
      - output.containerinstances[0]['ports'] != None
      - output.containerinstances[0]['containers'] != None
      - output.containerinstances[0]['containers'][0]['environment_variables'] | length == 1
      - output.containerinstances[0]['restart_policy'] == 'on_failure'

- name: Gather facts for all Container Instances in the resource group
  azure_rm_containerinstance_info:
    resource_group: "{{ resource_group }}"
  register: output

- name: Assert that facts are returned
  ansible.builtin.assert:
    that:
      - output.changed == False
      - output.containerinstances[0]['resource_group'] != None
      - output.containerinstances[0]['name'] != None
      - output.containerinstances[0]['os_type'] != None
      - output.containerinstances[0]['location'] != None
      - output.containerinstances[0]['ip_address'] != None
      - output.containerinstances[0]['ports'] != None
      - output.containerinstances[0]['containers'] != None
      - output.containerinstances[1]['resource_group'] != None
      - output.containerinstances[1]['name'] != None
      - output.containerinstances[1]['os_type'] != None
      - output.containerinstances[1]['location'] != None
      - output.containerinstances[1]['ip_address'] != None
      - output.containerinstances[1]['ports'] != None
      - output.containerinstances[1]['containers'] != None

- name: Create sample container instance -- User Identity
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}fourth"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
    identity:
      type: UserAssigned
      user_assigned_identities:
        id:
          - "{{ managed_identity_ids[0] }}"
          - "{{ managed_identity_ids[1] }}"
  register: output

- name: Gather facts for single Container Instance
  azure_rm_containerinstance_info:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}fourth"
  register: output

- name: Print the container instance facts
  ansible.builtin.debug:
    var: output

- name: Assert that user identities are used
  ansible.builtin.assert:
    that:
      - output.changed == False
      - managed_identity_ids[0] in output.containerinstances[0].identity.user_assigned_identities
      - managed_identity_ids[1] in output.containerinstances[0].identity.user_assigned_identities

- name: Remove container instance -- User Identity
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}fourth"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
    identity:
      type: UserAssigned
      user_assigned_identities:
        id:
          - "{{ managed_identity_ids[0] }}"
          - "{{ managed_identity_ids[1] }}"
    state: absent
  register: output

- name: Create sample container instance with volume
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}thi"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: mcr.microsoft.com/azuredocs/aci-helloworld
        memory: 1.5
        volume_mounts:
          - name: "my-filesharevolume"
            mount_path: "/data/files"
        ports:
          - 80
          - 81
    volumes:
      - name: "my-filesharevolume"
        azure_file:
          storage_account_name: "{{ storage_account_name }}"
          share_name: "{{ file_share_name }}"
          storage_account_key: "{{ storage_account_key }}"
  register: output
  ignore_errors: true

- name: Print failed return
  ansible.builtin.debug:
    var: output
  ignore_errors: true
  register: ignore_errors_register

- name: Assert the container instance is well created
  ansible.builtin.assert:
    that:
      - output.changed
      - output.provisioning_state == 'Succeeded'
  register: ignore_errors_register
  ignore_errors: true

- name: Gather facts for Container Instance
  azure_rm_containerinstance_info:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}thi"
  register: output
  ignore_errors: true

- name: Assert the container instance facts
  ansible.builtin.debug:
    var: output
  ignore_errors: true
  register: ignore_errors_register

- name: Assert that facts are returned
  ansible.builtin.assert:
    that:
      - output.changed == False
      - output.containerinstances[0]['resource_group'] != None
      - output.containerinstances[0]['name'] != None
      - output.containerinstances[0]['os_type'] != None
      - output.containerinstances[0]['location'] != None
      - output.containerinstances[0]['ip_address'] != None
      - output.containerinstances[0]['volumes'] != None
      - output.containerinstances[0]['ports'] != None
      - output.containerinstances[0]['containers'] != None
      - output.containerinstances[0]['containers'][0]['volume_mounts'] | length == 1
      - output.containerinstances[0]['containers'][0]['volume_mounts'][0]['name'] != None
      - output.containerinstances[0]['containers'][0]['volume_mounts'][0]['mount_path'] != None
  ignore_errors: true
  register: ignore_errors_register

- name: Remove container instance
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}thi"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: mcr.microsoft.com/azuredocs/aci-helloworld
        memory: 1.5
        volume_mounts:
          - name: "my-filesharevolume"
            mount_path: "/data/files"
        ports:
          - 80
          - 81
    volumes:
      - name: "my-filesharevolume"
        azure_file:
          storage_account_name: "{{ storage_account_name }}"
          share_name: "{{ file_share_name }}"
          storage_account_key: "{{ storage_account_key }}"
    state: absent
  register: output
  ignore_errors: true

- name: Remove container instance
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
    state: absent
  register: output

- name: Assert the container instance is deleted
  ansible.builtin.assert:
    that:
      - output.changed

- name: Remove container instance
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}sec"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
    state: absent

- name: Remove container instance again
  azure_rm_containerinstance:
    resource_group: "{{ resource_group }}"
    name: "aci{{ rpfx }}"
    os_type: linux
    ip_address: public
    location: "{{ location }}"
    ports:
      - 80
    containers:
      - name: mycontainer1
        image: "mcr.microsoft.com/azuredocs/aci-helloworld:latest"
        memory: 1.5
        ports:
          - 80
          - 81
    state: absent
  register: output

- name: Assert the changed is false
  ansible.builtin.assert:
    that:
      - output.changed == False

- name: Delete user managed identities
  ansible.builtin.include_tasks: "{{ role_path }}/../../../integration_common_tasks/managed_identity.yml"
  vars:
    managed_identity_test_unique: 'aci'
    managed_identity_unique: "{{ item }}"
    managed_identity_action: 'delete'
    managed_identity_location: "{{ location }}"
  with_items:
    - '1'
    - '2'
